CMAKE_MINIMUM_REQUIRED(VERSION 3.19)

# Read project version from file
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/package.json" PACKAGE_JSON)
string(JSON CMAKE_PROJECT_NAME GET "${PACKAGE_JSON}" "name")
string(JSON CMAKE_PROJECT_VERSION GET "${PACKAGE_JSON}" "version")
string(JSON CMAKE_PROJECT_HOMEPAGE_URL GET "${PACKAGE_JSON}" "homepage")
string(JSON CMAKE_PROJECT_AUTHOR GET "${PACKAGE_JSON}" "author")
string(JSON CMAKE_PROJECT_DESCRIPTION GET "${PACKAGE_JSON}" "description")

PROJECT(${CMAKE_PROJECT_NAME}
    LANGUAGES CXX
    VERSION ${CMAKE_PROJECT_VERSION}
    HOMEPAGE_URL "${CMAKE_PROJECT_HOMEPAGE_URL}"
    DESCRIPTION "${CMAKE_PROJECT_DESCRIPTION}")

include(GNUInstallDirs)

# Add conan dependencies
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/generators")

# Create library
SET(${CMAKE_PROJECT_NAME}_PUBLIC_HEADERS
    # Project public headers
    "include/ensurethread.hpp" )

add_library(${CMAKE_PROJECT_NAME} INTERFACE)

target_include_directories(${CMAKE_PROJECT_NAME} INTERFACE
    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

set_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES
    PUBLIC_HEADER "${${CMAKE_PROJECT_NAME}_PUBLIC_HEADERS}" )

# Tests
if (NOT BUILD_TESTING STREQUAL OFF)
    enable_testing()
    add_subdirectory(test)
endif()

# Install
install(TARGETS ${CMAKE_PROJECT_NAME}
  EXPORT "${CMAKE_PROJECT_NAME}-targets"
  INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
  PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}" )
